<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <OpenTapAutogeneratedMsBuildReferenceFile>$(MSBuildProjectDirectory)/obj/$(MSBuildProjectName).opentap.g.props</OpenTapAutogeneratedMsBuildReferenceFile>
  </PropertyGroup>

  <ImportGroup Condition="'$(ExcludeRestorePackageImports)' != 'true'">
    <Import Project="$(OpenTapAutogeneratedMsBuildReferenceFile)" Condition="Exists('$(OpenTapAutogeneratedMsBuildReferenceFile)')" />
  </ImportGroup>

  <ItemGroup Condition="'$(MSBuildThisFileDirectory)' != '' And HasTrailingSlash('$(MSBuildThisFileDirectory)') And '$(OS)' == 'Unix'">
    <PackagePayloadFiles Include="$(MSBuildThisFileDirectory)payload\**\*" Exclude="$(MSBuildThisFileDirectory)payload\tap.exe;$(MSBuildThisFileDirectory)payload\Dependencies\*\git2-*.dll"/>
  </ItemGroup>

  <ItemGroup Condition="'$(MSBuildThisFileDirectory)' != '' And HasTrailingSlash('$(MSBuildThisFileDirectory)') And '$(OS)' != 'Unix'">
    <PackagePayloadFiles Include="$(MSBuildThisFileDirectory)payload\**\*" Exclude="$(MSBuildThisFileDirectory)payload\tap;$(MSBuildThisFileDirectory)payload\tap.dll;$(MSBuildThisFileDirectory)payload\tap.runtimeconfig.json;$(MSBuildThisFileDirectory)payload\Dependencies\*\libgit2-*.so"/>
  </ItemGroup>

  <Target Name="CopyOpenTapPayloadFiles"
          Condition="'$(CopyOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          Inputs="@(PackagePayloadFiles)"
          Outputs="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"
          BeforeTargets="Build;PostBuildEvent">
    <Copy SourceFiles="@(PackagePayloadFiles)"
          DestinationFiles="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="CleanOpenTapPayloadFiles"
          Condition="'$(CleanOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          BeforeTargets="Clean">
    <ItemGroup>
      <PackagePayloadFilesToClean Include="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
    </ItemGroup>
    <Delete Files="@(PackagePayloadFilesToClean)" />
  </Target>

  <Target Name="CreateOpenTapPackage"
          Condition="'$(CreateOpenTapPackage)' != 'false' And
                     '$(OutDir)' != '' And
                     Exists('$(OutDir)') And
                     '$(OpenTapPackageDefinitionPath)' != '' And
                     Exists('$(OpenTapPackageDefinitionPath)')"
          AfterTargets="Build" DependsOnTargets="InstallOpenTapPackages">
    <Exec Command=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot;"
          Condition="'$(InstallCreatedOpenTapPackage)' != 'true'"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="true" />
    <Exec Command=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot; --install"
          Condition="'$(InstallCreatedOpenTapPackage)' == 'true'"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="true" />
  </Target>

  <Target Name="InstallOpenTapPackages"
        Inputs="$(MSBuildProjectFullPath)"
        Outputs="@(AdditionalOpenTapPackage-> '$(OutDir)Packages/%(Identity)/package.xml')"
        DependsOnTargets="CopyOpenTapPayloadFiles" AfterTargets="CopyOpenTapPayloadFiles">
    <Exec Command=".\tap package install --dependencies --force &quot;%(AdditionalOpenTapPackage.Identity)&quot;"
          Condition="'%(AdditionalOpenTapPackage.Repository)' == '' AND '%(AdditionalOpenTapPackage.Version)' == ''"
          LogStandardErrorAsError="true" EnvironmentVariables="OPENTAP_DEBUG_INSTALL=true" WorkingDirectory="$(OutDir)"/>
    <Exec Command=".\tap package install --dependencies --force &quot;%(AdditionalOpenTapPackage.Identity)&quot; -r &quot;%(AdditionalOpenTapPackage.Repository)&quot;"
          Condition="'%(AdditionalOpenTapPackage.Repository)' != '' AND '%(AdditionalOpenTapPackage.Version)' == ''"
          LogStandardErrorAsError="true" EnvironmentVariables="OPENTAP_DEBUG_INSTALL=true" WorkingDirectory="$(OutDir)"/>
    <Exec Command=".\tap package install --dependencies --force &quot;%(AdditionalOpenTapPackage.Identity)&quot; --version &quot;%(AdditionalOpenTapPackage.Version)&quot;"
          Condition="'%(AdditionalOpenTapPackage.Repository)' == '' AND '%(AdditionalOpenTapPackage.Version)' != ''"
          LogStandardErrorAsError="true" EnvironmentVariables="OPENTAP_DEBUG_INSTALL=true" WorkingDirectory="$(OutDir)"/>
    <Exec Command=".\tap package install --dependencies --force &quot;%(AdditionalOpenTapPackage.Identity)&quot; -r &quot;%(AdditionalOpenTapPackage.Repository)&quot; --version &quot;%(AdditionalOpenTapPackage.Version)&quot;"
          Condition="'%(AdditionalOpenTapPackage.Repository)' != '' AND '%(AdditionalOpenTapPackage.Version)' != ''"
          LogStandardErrorAsError="true" EnvironmentVariables="OPENTAP_DEBUG_INSTALL=true" WorkingDirectory="$(OutDir)"/>
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.AddAssemblyReferencesFromPackage" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="GenerateOpenTapReferenceProps"
      Inputs="$(MSBuildProjectFullPath)"
      Outputs="$(OpenTapAutogeneratedMsBuildReferenceFile)"
      Condition="@(AdditionalOpenTapPackage->AnyHaveMetadataValue('Reference', 'true'))"
      DependsOnTargets="InstallOpenTapPackages" BeforeTargets="ResolveReferences">
    <AddAssemblyReferencesFromPackage PackageInstallDir="$(OutDir)"
                                      TargetMsBuildFile="$(OpenTapAutogeneratedMsBuildReferenceFile)"
                                      PackageNames="@(AdditionalOpenTapPackage->WithMetadataValue('Reference', 'true'))"/>
    <Touch Files="$(MSBuildThisFileFullPath)"/>
  </Target>

</Project>
